def VERSION_NAME = "0.3.0"

buildscript {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.10'
    }
}

apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

ext {
    pom = [
            publishedGroupId  : 'com.shopify.syrup',
            artifact          : 'syrup-gradle',
            libraryName       : 'syrup-gradle',
            libraryDescription: 'A Gradle plugin for generating GraphQL models with Syrup.',
            siteUrl           : 'https://shopify.github.io/syrup',
            gitUrl            : 'https://github.com/Shopify/syrup-gradle.git',
            licenseName       : 'The MIT License',
            licenseUrl        : 'https://opensource.org/licenses/MIT',
            author            : 'Shopify Inc.'
    ]
}

group pom.publishedGroupId
archivesBaseName = pom.artifact
version VERSION_NAME

repositories {
    mavenLocal()
    google()
    mavenCentral()
}

dependencies {
    implementation 'org.yaml:snakeyaml:1.29'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.10"
}

gradlePlugin {
    plugins {
        syrupPlugin {
            id = 'com.shopify.syrup'
            implementationClass = 'com.shopify.syrup.SyrupPlugin'
        }
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("publishPluginMavenPublicationToMavenRepository") }
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications
}

publishing {
    repositories {
        maven {
            def release = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshot = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshot : release

            credentials {
                username System.getenv("OSSRH_USERNAME")
                password System.getenv("OSSRH_PASSWORD")
            }
        }
    }

    afterEvaluate {
        publications {
            pluginMaven {
                artifact javadocJar
                artifact sourcesJar

                pom {
                    name = project.ext.pom.libraryName
                    description = project.ext.pom.libraryDescription
                    url = project.ext.pom.siteUrl

                    licenses {
                        license {
                            name = project.ext.pom.licenseName
                            url = project.ext.pom.licenseUrl
                        }
                    }
                    developers {
                        developer {
                            name = project.ext.pom.author
                        }
                    }
                    scm {
                        connection = project.ext.pom.gitUrl
                        developerConnection = project.ext.pom.gitUrl
                        url = project.ext.pom.siteUrl
                    }
                }
            }
        }
    }
}
